# -*- coding: utf-8 -*-
"""RulesGeneration Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EFGmtHrKQG-ZExngsVB5xm5_fge1rdF3
"""

#pip install langchain langchain-community langchain-google-genai huggingface-hub sentence-transformers python-dotenv ollama

from langchain_community.llms import Ollama
from langchain_community.embeddings import HuggingFaceEmbeddings
import os
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import ChatPromptTemplate
from langchain.schema import StrOutputParser
import time

import json
chunks =  []
file_path = "/content/rules.json"

try:
    with open(file_path, 'r') as f:
        data = json.load(f)
    for item in data:
        chunk_text = item["chunk"]
        chunks.append(chunk_text)
        print("Chunk Content:")
        print(chunk_text)
        print("-" * 50)

except FileNotFoundError:
    print(f"Error: File not found at path: {file_path}")
except json.JSONDecodeError:
    print(f"Error: Could not decode JSON from file: {file_path}. Please ensure it is valid JSON.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

models = [
    ChatGoogleGenerativeAI(model="gemini-2.0-flash-thinking-exp-01-21", api_key="your_api_key_1"),
    ChatGoogleGenerativeAI(model="gemini-2.0-flash-thinking-exp-01-21", api_key="your_api_key_2"),
    ChatGoogleGenerativeAI(model="gemini-2.0-flash-thinking-exp-01-21", api_key="your_api_key_3"),
    ChatGoogleGenerativeAI(model="gemini-2.0-flash-thinking-exp-01-21", api_key="your_api_key_4"),
    ChatGoogleGenerativeAI(model="gemini-2.0-flash-thinking-exp-01-21", api_key="your_api_key_5"),
]

from  langchain.prompts import PromptTemplate

refine_template = PromptTemplate(
    input_variables=["context"],
    template='''Extract the topic of the given chunk, summarize it concisely, and then provide the chunk itself. Output only these three elements without extra text.

Example:
Chunk: "College Departments\nThe college consists of the following scientific departments:\n1. Department of Computer Science\n2. Department of Information Systems\n3. Department of Basic Sciences\n4. Department of Computer Systems\n5. Department of Scientific Calculations\nThe college may establish other departments in the college in accordance with the provisions of the Universities Organization Law."

Expected Output:
Topic: College Departments
Summary: The college has five scientific departments and may establish more as per regulations.
Chunk: "College Departments\nThe college consists of the following scientific departments:\n1. Department of Computer Science\n2. Department of Information Systems\n3. Department of Basic Sciences\n4. Department of Computer Systems\n5. Department of Scientific Calculations\nThe college may establish other departments in the college in accordance with the provisions of the Universities Organization Law."

Now, process the following chunk:
Chunk: "{context}"'''
)

idx = 0
def get_query ( prompt, context) :
    while (True) :
      global idx
      idx+=1
      try :
        chain  = prompt |  models[idx%5] | StrOutputParser()
        response  = chain.invoke({"context": context})
        print("ok")
        return response
      except Exception as e  :
        print(e)
        time.sleep(10)

print(get_query(refine_template ,chunks[0]))

refined_chunks = []
for  chunk in chunks :
  refined_chunks.append(get_query(chunk))

print(len(refined_chunks))

question_prompt = PromptTemplate(
    input_variables=["context"],
    template='''Generate a list of ** from 5 to 12** relevant questions a student might ask based on the given chunk. Ensure a mix of direct and open-ended questions that there answers are exist in the chunk. Output only the questions in the following format:

Example:
Chunk: "The Computer Science department focuses on programming, algorithms, and artificial intelligence."
Output:
- What topics are covered in the Computer Science department?
- Importance of artificial intelligence in the curriculum?
- How does programming relate to artificial intelligence?
- Career opportunities for Computer Science graduates?
- Key skills needed for success in Computer Science?
- How do algorithms help in software development?
- Specializations available within Computer Science?

Now, generate **5 to 12** questions for the following chunk:
Chunk: "{context}"
Output:'''
)

print(get_query(question_prompt ,refined_chunks[0]))

import csv

csv_file = "/content/rulesDataset.csv"

with open(csv_file , mode = 'w'  , newline='' ,encoding='utf-8') as file :
  writer  =  csv.writer(file)
  writer.writerow(["question" , "chunk"])

def add_to_csv(data , chunk ) :
  questions = [line for line in data.split('\n')]
  try :
    with open(csv_file , mode = 'a' , newline='' , encoding='utf-8') as file :
      writer  =  csv.writer(file)
      for question in questions :
        writer.writerow([question , chunk])
        print("write ok")
  except Exception as e :
    print(e)

for chunk in refined_chunks :
  add_to_csv(get_query(question_prompt ,chunk) , chunk)